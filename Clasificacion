{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNk+8qX8SEjGQEvlcQD3FE6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rafaelapm93/TF_2.0/blob/main/Clasificacion\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4K8y6khAako",
        "outputId": "2a8efbdb-4490-4eaf-cebf-add47907d58d"
      },
      "source": [
        "try:\r\n",
        "  %tensorflow_version 2.x  # Colab only.\r\n",
        "except Exception:\r\n",
        "  pass\r\n",
        "\r\n",
        "import tensorflow as tf\r\n",
        "print(tf.__version__)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "`%tensorflow_version` only switches the major version: 1.x or 2.x.\n",
            "You set: `2.x  # Colab only.`. This will be interpreted as: `2.x`.\n",
            "\n",
            "\n",
            "TensorFlow 2.x selected.\n",
            "2.4.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SMnUammpAbU7"
      },
      "source": [
        "from sklearn.datasets import load_breast_cancer"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3g88tRpyAhyz"
      },
      "source": [
        "df = load_breast_cancer()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07gnGlFtAly1",
        "outputId": "9e230b73-3966-44b7-9d68-d1df347acb66"
      },
      "source": [
        "df.keys()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zAYLroJ2Anfr"
      },
      "source": [
        "Y = df['target']\r\n",
        "X = df['data']"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_UhOX6DtAuQm",
        "outputId": "55066f3c-c7f2-407f-bfd4-db4a42a552dc"
      },
      "source": [
        "df['feature_names']"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n",
              "       'mean smoothness', 'mean compactness', 'mean concavity',\n",
              "       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n",
              "       'radius error', 'texture error', 'perimeter error', 'area error',\n",
              "       'smoothness error', 'compactness error', 'concavity error',\n",
              "       'concave points error', 'symmetry error',\n",
              "       'fractal dimension error', 'worst radius', 'worst texture',\n",
              "       'worst perimeter', 'worst area', 'worst smoothness',\n",
              "       'worst compactness', 'worst concavity', 'worst concave points',\n",
              "       'worst symmetry', 'worst fractal dimension'], dtype='<U23')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QuhyJM8OAvpx",
        "outputId": "c60e2e6e-994f-4c34-f304-b94b4fe8f200"
      },
      "source": [
        "Y"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
              "       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n",
              "       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n",
              "       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n",
              "       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n",
              "       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n",
              "       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n",
              "       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n",
              "       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n",
              "       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n",
              "       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n",
              "       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n",
              "       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n",
              "       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n",
              "       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n",
              "       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5EIZZ3LA25W",
        "outputId": "a7e6ec82-8d81-4a26-e10c-eaa7b45f6ee4"
      },
      "source": [
        "X.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(569, 30)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5tpcraeHA7IG"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\r\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "buNuTf2gBGaF"
      },
      "source": [
        "X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.33)\r\n",
        "F,C = X_train.shape"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GMAjRhJRDVNF",
        "outputId": "cc17cd9f-e83f-4089-bc48-3ea84d4a5ad8"
      },
      "source": [
        " X_train.shape"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(381, 30)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1tS84AakBVbV"
      },
      "source": [
        "scaler = StandardScaler()\r\n",
        "X_train_scaled = scaler.fit_transform(X_train)\r\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QG50KLU2BxfK",
        "outputId": "f500e170-8c91-4bbd-d03e-b20abdc12b68"
      },
      "source": [
        "model = tf.keras.models.Sequential([\r\n",
        "        tf.keras.layers.Input(shape = (C,)),\r\n",
        "        tf.keras.layers.Dense(1,activation='sigmoid')\r\n",
        "])\r\n",
        "\r\n",
        "model.compile(optimizer = 'adam',\r\n",
        "              loss = 'binary_crossentropy',\r\n",
        "              metrics = ['accuracy'])\r\n",
        "\r\n",
        "r = model.fit(X_train_scaled,y_train,validation_data = (X_test_scaled,y_test),epochs = 100)\r\n",
        "\r\n",
        "# Evaluate the model - evaluate() returns loss and accuracy\r\n",
        "print(\"Train score:\", model.evaluate(X_train_scaled, y_train))\r\n",
        "print(\"Test score:\", model.evaluate(X_test_scaled, y_test))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "12/12 [==============================] - 1s 17ms/step - loss: 0.5735 - accuracy: 0.7165 - val_loss: 0.5361 - val_accuracy: 0.7500\n",
            "Epoch 2/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.5252 - accuracy: 0.7729 - val_loss: 0.4789 - val_accuracy: 0.8085\n",
            "Epoch 3/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.4889 - accuracy: 0.7817 - val_loss: 0.4310 - val_accuracy: 0.8457\n",
            "Epoch 4/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.4252 - accuracy: 0.8523 - val_loss: 0.3919 - val_accuracy: 0.8830\n",
            "Epoch 5/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.3691 - accuracy: 0.8942 - val_loss: 0.3592 - val_accuracy: 0.8989\n",
            "Epoch 6/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.3625 - accuracy: 0.9028 - val_loss: 0.3315 - val_accuracy: 0.9202\n",
            "Epoch 7/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.3391 - accuracy: 0.8948 - val_loss: 0.3081 - val_accuracy: 0.9202\n",
            "Epoch 8/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.3179 - accuracy: 0.9044 - val_loss: 0.2883 - val_accuracy: 0.9255\n",
            "Epoch 9/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.3000 - accuracy: 0.9121 - val_loss: 0.2711 - val_accuracy: 0.9309\n",
            "Epoch 10/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2992 - accuracy: 0.9068 - val_loss: 0.2559 - val_accuracy: 0.9415\n",
            "Epoch 11/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2861 - accuracy: 0.9369 - val_loss: 0.2429 - val_accuracy: 0.9415\n",
            "Epoch 12/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.2623 - accuracy: 0.9411 - val_loss: 0.2313 - val_accuracy: 0.9415\n",
            "Epoch 13/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2490 - accuracy: 0.9476 - val_loss: 0.2210 - val_accuracy: 0.9415\n",
            "Epoch 14/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.2411 - accuracy: 0.9551 - val_loss: 0.2120 - val_accuracy: 0.9415\n",
            "Epoch 15/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.2088 - accuracy: 0.9698 - val_loss: 0.2039 - val_accuracy: 0.9415\n",
            "Epoch 16/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.2273 - accuracy: 0.9613 - val_loss: 0.1967 - val_accuracy: 0.9415\n",
            "Epoch 17/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2122 - accuracy: 0.9705 - val_loss: 0.1898 - val_accuracy: 0.9574\n",
            "Epoch 18/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2026 - accuracy: 0.9785 - val_loss: 0.1839 - val_accuracy: 0.9574\n",
            "Epoch 19/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.2106 - accuracy: 0.9645 - val_loss: 0.1785 - val_accuracy: 0.9628\n",
            "Epoch 20/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1945 - accuracy: 0.9789 - val_loss: 0.1734 - val_accuracy: 0.9628\n",
            "Epoch 21/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1931 - accuracy: 0.9698 - val_loss: 0.1688 - val_accuracy: 0.9628\n",
            "Epoch 22/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1874 - accuracy: 0.9724 - val_loss: 0.1646 - val_accuracy: 0.9628\n",
            "Epoch 23/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1767 - accuracy: 0.9748 - val_loss: 0.1605 - val_accuracy: 0.9628\n",
            "Epoch 24/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1720 - accuracy: 0.9707 - val_loss: 0.1568 - val_accuracy: 0.9628\n",
            "Epoch 25/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1700 - accuracy: 0.9738 - val_loss: 0.1535 - val_accuracy: 0.9628\n",
            "Epoch 26/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1533 - accuracy: 0.9806 - val_loss: 0.1504 - val_accuracy: 0.9681\n",
            "Epoch 27/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1643 - accuracy: 0.9609 - val_loss: 0.1474 - val_accuracy: 0.9628\n",
            "Epoch 28/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1512 - accuracy: 0.9781 - val_loss: 0.1447 - val_accuracy: 0.9628\n",
            "Epoch 29/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1728 - accuracy: 0.9656 - val_loss: 0.1422 - val_accuracy: 0.9628\n",
            "Epoch 30/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1583 - accuracy: 0.9687 - val_loss: 0.1397 - val_accuracy: 0.9628\n",
            "Epoch 31/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1465 - accuracy: 0.9640 - val_loss: 0.1374 - val_accuracy: 0.9628\n",
            "Epoch 32/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1538 - accuracy: 0.9700 - val_loss: 0.1353 - val_accuracy: 0.9628\n",
            "Epoch 33/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1360 - accuracy: 0.9702 - val_loss: 0.1333 - val_accuracy: 0.9628\n",
            "Epoch 34/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1433 - accuracy: 0.9742 - val_loss: 0.1314 - val_accuracy: 0.9628\n",
            "Epoch 35/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1275 - accuracy: 0.9842 - val_loss: 0.1296 - val_accuracy: 0.9628\n",
            "Epoch 36/100\n",
            "12/12 [==============================] - 0s 18ms/step - loss: 0.1343 - accuracy: 0.9727 - val_loss: 0.1279 - val_accuracy: 0.9628\n",
            "Epoch 37/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1392 - accuracy: 0.9735 - val_loss: 0.1263 - val_accuracy: 0.9628\n",
            "Epoch 38/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1495 - accuracy: 0.9679 - val_loss: 0.1248 - val_accuracy: 0.9628\n",
            "Epoch 39/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1276 - accuracy: 0.9840 - val_loss: 0.1234 - val_accuracy: 0.9628\n",
            "Epoch 40/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1244 - accuracy: 0.9745 - val_loss: 0.1220 - val_accuracy: 0.9628\n",
            "Epoch 41/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1244 - accuracy: 0.9829 - val_loss: 0.1207 - val_accuracy: 0.9628\n",
            "Epoch 42/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1266 - accuracy: 0.9747 - val_loss: 0.1194 - val_accuracy: 0.9628\n",
            "Epoch 43/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1157 - accuracy: 0.9884 - val_loss: 0.1182 - val_accuracy: 0.9628\n",
            "Epoch 44/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1184 - accuracy: 0.9822 - val_loss: 0.1172 - val_accuracy: 0.9628\n",
            "Epoch 45/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1320 - accuracy: 0.9744 - val_loss: 0.1161 - val_accuracy: 0.9628\n",
            "Epoch 46/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1298 - accuracy: 0.9779 - val_loss: 0.1150 - val_accuracy: 0.9628\n",
            "Epoch 47/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1103 - accuracy: 0.9867 - val_loss: 0.1140 - val_accuracy: 0.9628\n",
            "Epoch 48/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1112 - accuracy: 0.9868 - val_loss: 0.1131 - val_accuracy: 0.9628\n",
            "Epoch 49/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1071 - accuracy: 0.9890 - val_loss: 0.1122 - val_accuracy: 0.9628\n",
            "Epoch 50/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1159 - accuracy: 0.9823 - val_loss: 0.1113 - val_accuracy: 0.9628\n",
            "Epoch 51/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1124 - accuracy: 0.9847 - val_loss: 0.1104 - val_accuracy: 0.9628\n",
            "Epoch 52/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1074 - accuracy: 0.9833 - val_loss: 0.1096 - val_accuracy: 0.9628\n",
            "Epoch 53/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1089 - accuracy: 0.9868 - val_loss: 0.1089 - val_accuracy: 0.9681\n",
            "Epoch 54/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0992 - accuracy: 0.9852 - val_loss: 0.1082 - val_accuracy: 0.9681\n",
            "Epoch 55/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1278 - accuracy: 0.9722 - val_loss: 0.1074 - val_accuracy: 0.9681\n",
            "Epoch 56/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1317 - accuracy: 0.9834 - val_loss: 0.1068 - val_accuracy: 0.9681\n",
            "Epoch 57/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1037 - accuracy: 0.9891 - val_loss: 0.1061 - val_accuracy: 0.9681\n",
            "Epoch 58/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1124 - accuracy: 0.9768 - val_loss: 0.1055 - val_accuracy: 0.9681\n",
            "Epoch 59/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0948 - accuracy: 0.9840 - val_loss: 0.1049 - val_accuracy: 0.9681\n",
            "Epoch 60/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0961 - accuracy: 0.9847 - val_loss: 0.1043 - val_accuracy: 0.9681\n",
            "Epoch 61/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0967 - accuracy: 0.9876 - val_loss: 0.1037 - val_accuracy: 0.9681\n",
            "Epoch 62/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0981 - accuracy: 0.9846 - val_loss: 0.1031 - val_accuracy: 0.9681\n",
            "Epoch 63/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1093 - accuracy: 0.9717 - val_loss: 0.1026 - val_accuracy: 0.9681\n",
            "Epoch 64/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1088 - accuracy: 0.9787 - val_loss: 0.1021 - val_accuracy: 0.9681\n",
            "Epoch 65/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1212 - accuracy: 0.9718 - val_loss: 0.1016 - val_accuracy: 0.9681\n",
            "Epoch 66/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1061 - accuracy: 0.9742 - val_loss: 0.1011 - val_accuracy: 0.9734\n",
            "Epoch 67/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1133 - accuracy: 0.9759 - val_loss: 0.1006 - val_accuracy: 0.9734\n",
            "Epoch 68/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.1166 - accuracy: 0.9752 - val_loss: 0.1002 - val_accuracy: 0.9734\n",
            "Epoch 69/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0899 - accuracy: 0.9748 - val_loss: 0.0997 - val_accuracy: 0.9734\n",
            "Epoch 70/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0918 - accuracy: 0.9852 - val_loss: 0.0993 - val_accuracy: 0.9734\n",
            "Epoch 71/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0913 - accuracy: 0.9800 - val_loss: 0.0990 - val_accuracy: 0.9734\n",
            "Epoch 72/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0941 - accuracy: 0.9793 - val_loss: 0.0985 - val_accuracy: 0.9734\n",
            "Epoch 73/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0898 - accuracy: 0.9769 - val_loss: 0.0981 - val_accuracy: 0.9734\n",
            "Epoch 74/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0849 - accuracy: 0.9837 - val_loss: 0.0977 - val_accuracy: 0.9734\n",
            "Epoch 75/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0975 - accuracy: 0.9781 - val_loss: 0.0974 - val_accuracy: 0.9734\n",
            "Epoch 76/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0834 - accuracy: 0.9861 - val_loss: 0.0970 - val_accuracy: 0.9734\n",
            "Epoch 77/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0840 - accuracy: 0.9776 - val_loss: 0.0967 - val_accuracy: 0.9734\n",
            "Epoch 78/100\n",
            "12/12 [==============================] - 0s 19ms/step - loss: 0.0969 - accuracy: 0.9725 - val_loss: 0.0963 - val_accuracy: 0.9734\n",
            "Epoch 79/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0871 - accuracy: 0.9845 - val_loss: 0.0960 - val_accuracy: 0.9734\n",
            "Epoch 80/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0886 - accuracy: 0.9802 - val_loss: 0.0957 - val_accuracy: 0.9734\n",
            "Epoch 81/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0929 - accuracy: 0.9811 - val_loss: 0.0954 - val_accuracy: 0.9734\n",
            "Epoch 82/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0841 - accuracy: 0.9830 - val_loss: 0.0951 - val_accuracy: 0.9734\n",
            "Epoch 83/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1006 - accuracy: 0.9788 - val_loss: 0.0948 - val_accuracy: 0.9734\n",
            "Epoch 84/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0792 - accuracy: 0.9869 - val_loss: 0.0945 - val_accuracy: 0.9734\n",
            "Epoch 85/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0894 - accuracy: 0.9803 - val_loss: 0.0943 - val_accuracy: 0.9734\n",
            "Epoch 86/100\n",
            "12/12 [==============================] - 0s 5ms/step - loss: 0.0946 - accuracy: 0.9824 - val_loss: 0.0940 - val_accuracy: 0.9734\n",
            "Epoch 87/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0890 - accuracy: 0.9750 - val_loss: 0.0937 - val_accuracy: 0.9734\n",
            "Epoch 88/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0713 - accuracy: 0.9882 - val_loss: 0.0935 - val_accuracy: 0.9734\n",
            "Epoch 89/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.1093 - accuracy: 0.9740 - val_loss: 0.0932 - val_accuracy: 0.9734\n",
            "Epoch 90/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0808 - accuracy: 0.9768 - val_loss: 0.0929 - val_accuracy: 0.9734\n",
            "Epoch 91/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0752 - accuracy: 0.9812 - val_loss: 0.0927 - val_accuracy: 0.9734\n",
            "Epoch 92/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0704 - accuracy: 0.9814 - val_loss: 0.0925 - val_accuracy: 0.9734\n",
            "Epoch 93/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0717 - accuracy: 0.9855 - val_loss: 0.0923 - val_accuracy: 0.9734\n",
            "Epoch 94/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0839 - accuracy: 0.9743 - val_loss: 0.0921 - val_accuracy: 0.9734\n",
            "Epoch 95/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0848 - accuracy: 0.9810 - val_loss: 0.0918 - val_accuracy: 0.9734\n",
            "Epoch 96/100\n",
            "12/12 [==============================] - 0s 7ms/step - loss: 0.0940 - accuracy: 0.9769 - val_loss: 0.0916 - val_accuracy: 0.9734\n",
            "Epoch 97/100\n",
            "12/12 [==============================] - 0s 7ms/step - loss: 0.0945 - accuracy: 0.9727 - val_loss: 0.0914 - val_accuracy: 0.9734\n",
            "Epoch 98/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0856 - accuracy: 0.9767 - val_loss: 0.0913 - val_accuracy: 0.9734\n",
            "Epoch 99/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0847 - accuracy: 0.9819 - val_loss: 0.0910 - val_accuracy: 0.9734\n",
            "Epoch 100/100\n",
            "12/12 [==============================] - 0s 6ms/step - loss: 0.0794 - accuracy: 0.9696 - val_loss: 0.0908 - val_accuracy: 0.9734\n",
            "12/12 [==============================] - 0s 1ms/step - loss: 0.0822 - accuracy: 0.9790\n",
            "Train score: [0.08218009769916534, 0.9790025949478149]\n",
            "6/6 [==============================] - 0s 2ms/step - loss: 0.0908 - accuracy: 0.9734\n",
            "Test score: [0.09082671254873276, 0.9734042286872864]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "LnCv0hBCC6vk",
        "outputId": "2a3c9291-5e6e-4d1d-8ec2-7e6505085471"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "plt.plot(r.history['loss'], label = 'loss')\r\n",
        "plt.plot(r.history['val_loss'], label = 'val_loss')\r\n",
        "plt.legend()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f1dbc673780>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "wVrdcBO4EQ-s",
        "outputId": "5c8a6d36-102a-4099-ad31-f5dcf381ec40"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "plt.plot(r.history['accuracy'], label = 'accuracy')\r\n",
        "plt.plot(r.history['val_accuracy'], label = 'val_accuracy')\r\n",
        "plt.legend()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f1dbca37ef0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XElOgWMEEcpU"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h-djsXogG3G5"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}