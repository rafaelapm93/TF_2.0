# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ae2Jn36Pvc_-WA31axevOn_IWM7YzVL5
"""

# Commented out IPython magic to ensure Python compatibility.
try:
#   %tensorflow_version 2.x  # Colab only.
except Exception:
  pass

import tensorflow as tf
print(tf.__version__)

from sklearn.datasets import load_breast_cancer

df = load_breast_cancer()

df.keys()

Y = df['target']
X = df['data']

df['feature_names']

Y

X.shape

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.33)
F,C = X_train.shape

X_train.shape

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = tf.keras.models.Sequential([
        tf.keras.layers.Input(shape = (C,)),
        tf.keras.layers.Dense(1,activation='sigmoid')
])

model.compile(optimizer = 'adam',
              loss = 'binary_crossentropy',
              metrics = ['accuracy'])

r = model.fit(X_train_scaled,y_train,validation_data = (X_test_scaled,y_test),epochs = 100)

# Evaluate the model - evaluate() returns loss and accuracy
print("Train score:", model.evaluate(X_train_scaled, y_train))
print("Test score:", model.evaluate(X_test_scaled, y_test))

import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label = 'loss')
plt.plot(r.history['val_loss'], label = 'val_loss')
plt.legend()

import matplotlib.pyplot as plt
plt.plot(r.history['accuracy'], label = 'accuracy')
plt.plot(r.history['val_accuracy'], label = 'val_accuracy')
plt.legend()



